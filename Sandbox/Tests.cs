using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace talib
{
    public class Tests
    {
        public async Task<dynamic> Test()
        {
            var inReal = JsonConvert.DeserializeObject<double[]>("[0.00619998,0.00634982,0.00596,0.00612371,0.00575111,0.00583322,0.00556,0.00580001,0.00575005,0.00566205,0.00563047,0.00560384,0.00537103,0.00514529,0.00529533,0.00528997,0.0049909,0.0052244,0.00532386,0.00548248,0.0057,0.00582956,0.00563969,0.00563715,0.00551206,0.00566,0.00619,0.00606276,0.006,0.00607,0.0058999,0.00599794,0.00595,0.00604838,0.00603996,0.0060425,0.00602991,0.00610015,0.00626857,0.00628364,0.00639883,0.00658276,0.0063,0.006045,0.00611607,0.00604454,0.00619964,0.00617997,0.006459,0.0059701,0.00603853,0.00592034,0.005855,0.00582995,0.00584208,0.00581999,0.00593991,0.0059999,0.0059,0.00589738,0.0058,0.0058041,0.00582004,0.0059,0.00594999,0.00600003,0.00629018,0.00612624,0.00614958,0.00603998,0.00609697,0.0060984,0.00611001,0.00608512,0.00615918,0.00623874,0.00624001,0.00622159,0.00619233,0.0061629,0.00615973,0.00615357,0.00623779,0.00640202,0.0063594,0.00629001,0.00623866,0.00625,0.00627699,0.00619998,0.00615204,0.006155,0.00610803,0.00626249,0.00608979,0.00610105,0.00605551,0.0061187,0.00610004,0.00619,0.00619999,0.00627999,0.00623205,0.0063699,0.00637,0.00628061,0.00635123,0.0064153,0.0063026,0.00634001,0.00633008,0.00633437,0.00622995,0.00618183,0.00614986,0.00608919,0.00608997,0.00599995,0.00590121,0.00597458,0.00596998,0.00620659,0.00609997,0.00613748,0.00611998,0.00612187,0.006168,0.0063,0.00622779,0.00636999,0.00635001,0.00631001,0.00629996,0.00627988,0.0061523,0.00620947,0.00628403,0.00626311,0.00616707,0.00619995,0.00630084,0.00628026,0.00626038,0.00625553,0.00620001,0.00625027,0.00630156,0.00633001,0.00633961,0.00635735,0.00640008,0.00643997,0.00638169,0.00640783,0.00635618,0.00635003,0.00646972,0.00640608,0.006415,0.00643,0.006435,0.00650986,0.00676005,0.00669993,0.00671017,0.006778,0.00675074,0.00701428,0.00703988,0.00691522,0.00675386,0.00673745,0.00681027,0.00681737,0.00675072,0.00669,0.0067,0.0067024,0.00664044,0.00665952,0.00661588,0.00661419,0.006626,0.00660011,0.0066595,0.0066,0.00668066,0.00671,0.00672016,0.00674427,0.00674998,0.00667001,0.00674957,0.00669701,0.0066706,0.006704,0.0066896,0.00667501,0.0067206,0.00674447,0.00671001,0.00674426,0.0067885,0.00672792,0.00670001,0.00671983,0.00659995,0.00662499,0.00665198,0.00664885,0.00663,0.00668,0.006725,0.00666399,0.006819,0.00686,0.00685101,0.00699,0.00694495,0.0068501,0.00697591,0.00691012,0.006989,0.00699704,0.00703954,0.00697801,0.00699189,0.00695905,0.00696003,0.00679635,0.00688071,0.00687306,0.00697979,0.00699491,0.00676997,0.0068,0.00685,0.00679999,0.00687,0.00689992,0.00689204,0.00688074,0.0068121,0.00690005,0.00688497,0.00692045,0.00683036,0.00687995,0.0068798,0.00682832,0.00687597,0.00689,0.00684385,0.00677261,0.00675112,0.0067251,0.00673011,0.00673175,0.00679999,0.00679999,0.006745,0.00675959,0.00671998,0.00673349,0.00677499,0.00670941,0.00674147,0.0066,0.00653,0.00652993,0.00631418,0.00628,0.00623,0.006289,0.00639,0.0064489,0.006435,0.0066,0.0066708,0.00662999,0.0066,0.006345,0.00641231,0.00648066,0.00649006,0.00634578,0.00639772,0.00633974,0.00624,0.00634448,0.00631004,0.00633104,0.00637116,0.00631333,0.00635446,0.00640844,0.00646998,0.00647498,0.00655542,0.00651105,0.006494,0.00656001,0.00658001,0.0065197,0.0063651,0.00652477,0.00660715,0.00655,0.00660002,0.00675,0.00673697,0.00671916,0.00682999,0.00686786,0.00689997,0.00680002,0.00674798,0.00676989,0.00679092,0.00683318,0.00681555,0.00678985,0.0067912,0.00677253,0.006779,0.00674127,0.00672886,0.00671009,0.00671127,0.00676506,0.00671601,0.00666666,0.00667028,0.00664548,0.00675,0.00674889,0.00671847,0.00671005,0.00673566,0.00678584,0.0067276,0.00676435,0.00677915,0.00675,0.00673501,0.00670516,0.0067,0.0066995,0.0067339,0.00679382,0.00669995,0.00669387,0.0067013,0.00670059,0.00668044,0.00669501,0.00670018,0.00673615,0.006725,0.00673615,0.006716,0.00670957,0.00670001,0.00670004,0.00671999,0.0067202,0.00669565,0.00664876,0.0066058,0.00665187,0.00660018,0.00662958,0.00657726,0.00656,0.00657494,0.00659059,0.00656996,0.00657351,0.00668999,0.0066341,0.00665335,0.00666318,0.0066331,0.00662499,0.00661642,0.00655,0.00650201,0.006505,0.00642001,0.00636637,0.00647,0.00661749,0.00645107,0.00650399,0.00650029,0.00655,0.00658898,0.00657003,0.0065326,0.00656956,0.00649477,0.00645999,0.00647296,0.00646989,0.00640561,0.00641339,0.00644308,0.00639606,0.00645049,0.00651021,0.00658885,0.00658411,0.0066392,0.00663693,0.00667686,0.00660876,0.00661026,0.00664005,0.00663342,0.006589,0.00656989,0.00650001,0.00658851,0.00655,0.00659986,0.00651264,0.00646301,0.00647,0.00644501,0.0065,0.0065101,0.00646004,0.00644124,0.00655888,0.00642776,0.00645794,0.00647999,0.00646007,0.0065,0.00658001,0.00654,0.00653,0.00653995,0.00655001,0.00652015,0.00651,0.00649003,0.00641456,0.00643,0.00645,0.00642996,0.00632308,0.00633988,0.00634031,0.00618907,0.00623057,0.00620863,0.00624643,0.00629986,0.0063412,0.00634985,0.00634979,0.00632852,0.00627837,0.00624976,0.00617099,0.00598007,0.00589,0.006046,0.00597366,0.00594556,0.00594941,0.00592209,0.00581447,0.00580387,0.0059,0.00603894,0.00593042,0.00601083,0.00604987,0.0061004,0.00610995,0.00611011,0.00602053,0.006038,0.00599144,0.0059999,0.00593982,0.00597347,0.0061789,0.0061029,0.00614,0.00620402,0.0061995,0.00618992,0.00619962,0.00625001,0.00629998,0.00629992,0.00625158]");


            var integration = new Integration();

            // MACD
            var result = await integration.Execute(new Dictionary<string, object>() {
                { "name", "Macd" },
                { "startIdx", 0 },
                { "endIdx", 499 },
                { "inReal", inReal },
                { "optInFastPeriod", 80 },
                { "optInSlowPeriod", 160 },
                { "optInSignalPeriod", 80 },
                { "outBegIdx", 0 },
                { "outNBElement", 0 },
                { "outMACD", new object[inReal.Length] },
                { "outMACDSignal", new object[inReal.Length] },
                { "outMACDHist", new object[inReal.Length] }                

            });

            Console.Write("MACD Result");
            Console.Write(result);

            // ACOS
            result = await integration.Execute(new Dictionary<string, object>() {
                { "name", "Acos" },
                { "startIdx", 0 },
                { "endIdx", 499 },
                { "inReal", inReal },
                { "outBegIdx", 0 },
                { "outNBElement", 0 },
                { "outReal", new object[inReal.Length] }

            });

            Console.Write("ACOS Result");
            Console.Write(result);













            Console.Read();
            return result;
        }
    }
}
